//
// autocar project communication
//
// 2017.01.11 V0.3
//
// Author: dunanshan@163.com (DU Nanshan)
//
// autocar communication protocol for 
// ethernet and internet application.
//

// revision: battery obstacles

package comm;

struct point
{
    float x;
    float y;
}

// user request service info
struct task
{
    int32_t userID;

    point on;
    point off;
    string detail;
}

// response to user request service
struct task_re
{
    int32_t userID;
    int32_t carID;

    string detail;
}

// ask car to serve user
struct car_task
{
    int32_t carID;   
    int32_t userID;

    point on;
    point off;
}

// enum of battery status
struct battery_status
{
    const int32_t ENOUGH = 0, CHARGING = 1, LOW = 2, NONE = -1;
}

// battery percent info
struct battery
{
    int32_t carID;

    int32_t percent;
}

// enum of car status
struct car_status
{
    const int32_t READY = 0, FIRST = 1, SECOND = 2, THIRD = 3, NONE = -1;
}

// report car info to server module, system monitor, ...
struct car_info
{
    int32_t carID;

    point location;    
    float heading;
    float velocity;    
    float curvature;
    int32_t status;
    int32_t energy;
    int64_t sendTime;
}

// info generated by base
struct base
{
    int32_t carID;

    float gyroscope;
    int32_t leftcode;
    int32_t rightcode;
    float velocity;
    float curvature;
}

// user triggers start button
struct base_start
{
    int32_t carID;

    boolean start_button;
}

struct base_start_echo
{
    int32_t carID;

    boolean start_echo;
}

// user triggers end button
struct base_end
{
    int32_t carID;

    boolean end_button;
}

struct base_end_echo
{
    int32_t carID;

    boolean end_echo;
}

// info generated by location & orientation module
struct pos_info
{
    int32_t carID;

    point location;
    float heading;    
    float velocity;
    float curvature;
}

// obstacles grid
// left right corner is the origin
// lengh of x, y, number of bytes
struct obstacles
{
    int32_t carID;

    int32_t x_len;
    int32_t y_len;
    int32_t num;
    byte grid[num];
}

// path dot
struct path
{
    int32_t carID;

    int32_t num;
    point path_dot[num];
}

// trajectory node
struct traj_node
{
    point locatioin;
    float velocity;
    float heading;
    float curvature;
}

// trajectory dots
struct trajectory
{
    int32_t carID;

    int32_t num;
    traj_node traj_dot[num];
}

// motion node
// logic representation
struct motion_node
{
    float curvature;
    float velocity;
    float acceleration;
}

// motion dots
struct motion
{
    int32_t carID;

    int32_t num;
    motion_node motion_dot[num];
}

// motor encoder number per second
// physic representation
struct motor_node
{
    int32_t leftcode;
    int32_t rightcode;
}

// motor encoder dots
struct motor
{
    int32_t carID;

    int32_t num;
    motor_node motor_dot[num];
}

